default:
        image: ubuntu:20.04

pages:
        before_script:
                - export DEBIAN_FRONTEND=noninteractive # fuck you tzdata
                - apt-get update
                - apt-get install --yes --force-yes g++ make git python libxml2 curl unzip
        script:
                - curl --output artifacts.zip "https://git.unistra.fr/api/v4/projects/19926/jobs/artifacts/master/download?job=build"
                - unzip -q artifacts.zip
                - cd qt5
                - qtconfig="$PWD/qtbase/bin/qt.conf"
                - git config --file="$qtconfig" DevicePaths.Prefix "$PWD/qtbase"
                - git config --file="$qtconfig" Paths.Prefix "$PWD/qtbase"
                - git config --file="$qtconfig" Paths.HostPrefix "$PWD/qtbase"
                - qmake_wasm="$PWD/qtbase/bin/qmake -qtconf $qtconfig"
                - $qmake_wasm --version
                - originaldir="/builds/lucas.schmidt/binaires-qt-wasm/qt5/qtbase"
                - find qtbase/{mkspecs/modules,lib,plugins,qml} -name '*.pri' -o -name '*.prl' -o -name '*.pc' | xargs sed -i "s+$originaldir+$PWD/qtbase+g"
                - cd ..
                - git clone https://github.com/emscripten-core/emsdk.git
                - cd emsdk
                - ./emsdk install 1.39.8
                - ./emsdk activate --embedded 1.39.8
                - source emsdk_env.sh
                - export PATH
                - em++ --version
                - cd ..
                - cd client
                - $qmake_wasm -d
                - make
                - cd ..
                - mkdir public
                - mv client/{client.{html,js,wasm},qtloader.js,qtlogo.svg,images} public
        artifacts:
                paths:
                        - public
        only:
                - master

verif_client:
        before_script:
                - export DEBIAN_FRONTEND=noninteractive # fuck you tzdata
                - apt-get update
                - apt-get install --yes --force-yes qt5-default g++ qtdeclarative5-dev make
        script:
                - cd client
                - qmake
                - make
        only:
                - merge_requests

verif_client_wasm:
        before_script:
                - export DEBIAN_FRONTEND=noninteractive # fuck you tzdata
                - apt-get update
                - apt-get install --yes --force-yes g++ make git python libxml2 curl unzip
        script:
                - curl --output artifacts.zip "https://git.unistra.fr/api/v4/projects/19926/jobs/artifacts/master/download?job=build"
                - unzip -q artifacts.zip
                - cd qt5
                - qtconfig="$PWD/qtbase/bin/qt.conf"
                - git config --file="$qtconfig" DevicePaths.Prefix "$PWD/qtbase"
                - git config --file="$qtconfig" Paths.Prefix "$PWD/qtbase"
                - git config --file="$qtconfig" Paths.HostPrefix "$PWD/qtbase"
                - qmake_wasm="$PWD/qtbase/bin/qmake -qtconf $qtconfig"
                - $qmake_wasm --version
                - originaldir="/builds/lucas.schmidt/binaires-qt-wasm/qt5/qtbase"
                - find qtbase/{mkspecs/modules,lib,plugins,qml} -name '*.pri' -o -name '*.prl' -o -name '*.pc' | xargs sed -i "s+$originaldir+$PWD/qtbase+g"
                - cd ..
                - git clone https://github.com/emscripten-core/emsdk.git
                - cd emsdk
                - ./emsdk install 1.39.8
                - ./emsdk activate --embedded 1.39.8
                - source emsdk_env.sh
                - export PATH
                - em++ --version
                - cd ..
                - cd client
                - $qmake_wasm -d
                - make
                - cd ..
                - mkdir public
                - mv client/{client.{html,js,wasm},qtloader.js,qtlogo.svg,images} public
        artifacts:
                paths:
                        - public
        only:
                - merge_requests

verif_client_android:
        before_script:
                - export DEBIAN_FRONTEND=noninteractive # fuck you tzdata
                - apt-get update
                - apt-get install --yes --force-yes openjdk-11-jdk gradle android-sdk curl unzip git make g++ python
        script:
                - curl --output android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip
                - unzip -d android-sdk android-sdk.zip
                - ANDROID_SDK_ROOT=$PWD/android-sdk
                - cd $ANDROID_SDK_ROOT/cmdline-tools/bin
                - ./sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install "cmdline-tools;latest" <<<y
                - ./sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install "platform-tools" "platforms;android-29" "build-tools;29.0.2" "ndk;21.3.6528147"
                - cd ../..
                - git clone git://code.qt.io/qt/qt5.git
                - cd qt5
                - git checkout 5.15
                - ./init-repository
                - ./configure -xplatform android-clang -disable-rpath -nomake tests -nomake examples -android-ndk $ANDROID_SDK_ROOT/ndk/21.3.6528147 -android-sdk $ANDROID_SDK_ROOT -no-warnings-are-errors -opensource -confirm-license
                - make -s
                - make install
                - cd ..
                - cd client
                - qmake
                - make install INSTALL_ROOT=android-build/
                - mkdir android-build/assets
                - cp images android-build/assets/
                - androiddeployqt --output android-build/
        artifacts:
                paths:
                        - client/android-build
        only:
                - merge_requests

verif_serveur:
        before_script:
                - export DEBIAN_FRONTEND=noninteractive # fuck you tzdata
                - apt-get update
                - apt-get install --yes --force-yes curl apt-transport-https ca-certificates gnupg
                - curl -fsSL https://crystal-lang.org/install.sh | bash
        script:
                - cd serveur
                - shards build
        only:
                - merge_requests
